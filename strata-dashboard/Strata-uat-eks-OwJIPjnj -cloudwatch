#!/usr/bin/env bash
set -euo pipefail

# ==== Fixed to your inputs ====
REGION="us-east-1"
CLUSTER="Strata-uat-eks-OwJIPjnj"
DASHBOARD_NAME="Strata-uat-eks-OwJIPjnj -cloudwatch"
NS="AWS/ContainerInsights"
PERIOD=300
# ==============================

echo "Region: $REGION"
echo "Cluster: $CLUSTER"
echo "Dashboard: $DASHBOARD_NAME"

echo "Sanity check: Container Insights metrics present?"
aws cloudwatch list-metrics \
  --region "$REGION" \
  --namespace "$NS" \
  --dimensions Name=ClusterName,Value="$CLUSTER" \
  --max-items 5

# Try to detect Container Insights log groups (for Logs Insights widgets)
APP_LG="/aws/containerinsights/${CLUSTER}/application"
INFRA_LG="/aws/containerinsights/${CLUSTER}/host"
PERF_LG="/aws/containerinsights/${CLUSTER}/performance"
for lg in "$APP_LG" "$INFRA_LG" "$PERF_LG"; do
  aws logs describe-log-groups --region "$REGION" --log-group-name-prefix "$lg" --max-items 1 >/dev/null 2>&1 || true
done

# Build dashboard
cat > dashboard.json <<'JSON'
{
  "widgets": [
    { "type":"text","x":0,"y":0,"width":24,"height":2,
      "properties":{"markdown":"# EKS â€“ Strata-uat-eks-OwJIPjnj (CloudWatch) \nCluster overview, health, capacity and workload state using **AWS/ContainerInsights**."}
    },

    /* ===== Cluster Health ===== */
    { "type":"metric","x":0,"y":2,"width":8,"height":6,
      "properties":{"region":"REGION","title":"Cluster CPU utilization (%)","view":"timeSeries","stat":"Average","period":PERIOD,
        "yAxis":{"left":{"min":0,"max":100,"label":"%"}},
        "metrics":[["AWS/ContainerInsights","node_cpu_utilization","ClusterName","CLUSTER",{"label":"CPU %"}]]
    }},
    { "type":"metric","x":8,"y":2,"width":8,"height":6,
      "properties":{"region":"REGION","title":"Cluster Memory utilization (%)","view":"timeSeries","stat":"Average","period":PERIOD,
        "yAxis":{"left":{"min":0,"max":100,"label":"%"}},
        "metrics":[["AWS/ContainerInsights","node_memory_utilization","ClusterName","CLUSTER",{"label":"Mem %"}]]
    }},
    { "type":"metric","x":16,"y":2,"width":8,"height":6,
      "properties":{"region":"REGION","title":"Cluster Filesystem utilization (%)","view":"timeSeries","stat":"Average","period":PERIOD,
        "yAxis":{"left":{"min":0,"max":100,"label":"%"}},
        "metrics":[["AWS/ContainerInsights","node_filesystem_utilization","ClusterName","CLUSTER",{"label":"FS %"}]]
    }},

    /* ===== Pod Phase / Counts ===== */
    { "type":"metric","x":0,"y":8,"width":12,"height":6,
      "properties":{"region":"REGION","title":"Pods by phase (running/pending/failed/etc)","view":"timeSeries","stat":"Sum","period":PERIOD,
        "metrics":[
          ["AWS/ContainerInsights","pod_number_of_running_pods","ClusterName","CLUSTER",{"label":"running"}],
          [".","pod_number_of_pending_pods",".","CLUSTER",{"label":"pending"}],
          [".","pod_number_of_failed_pods",".","CLUSTER",{"label":"failed"}],
          [".","pod_number_of_unknown_pods",".","CLUSTER",{"label":"unknown"}],
          [".","pod_number_of_succeeded_pods",".","CLUSTER",{"label":"succeeded"}]
        ]
    }},
    { "type":"metric","x":12,"y":8,"width":12,"height":6,
      "properties":{"region":"REGION","title":"Running pods by namespace","view":"timeSeries","stat":"Sum","period":PERIOD,
        "metrics":[["AWS/ContainerInsights","pod_number_of_running_pods","ClusterName","CLUSTER","Namespace","*",{"label":"namespace"}]]
    }},

    /* ===== Nodes (per-node CPU/Mem) ===== */
    { "type":"metric","x":0,"y":14,"width":12,"height":6,
      "properties":{"region":"REGION","title":"Node CPU utilization (%) by node","view":"timeSeries","stat":"Average","period":PERIOD,
        "yAxis":{"left":{"min":0,"max":100,"label":"%"}},
        "metrics":[["AWS/ContainerInsights","node_cpu_utilization","ClusterName","CLUSTER","NodeName","*",{"label":"node"}]]
    }},
    { "type":"metric","x":12,"y":14,"width":12,"height":6,
      "properties":{"region":"REGION","title":"Node Memory utilization (%) by node","view":"timeSeries","stat":"Average","period":PERIOD,
        "yAxis":{"left":{"min":0,"max":100,"label":"%"}},
        "metrics":[["AWS/ContainerInsights","node_memory_utilization","ClusterName","CLUSTER","NodeName","*",{"label":"node"}]]
    }},

    /* ===== Network / Disk ===== */
    { "type":"metric","x":0,"y":20,"width":12,"height":6,
      "properties":{"region":"REGION","title":"Node network bytes (rx/tx) per node","view":"timeSeries","stat":"Sum","period":PERIOD,
        "metrics":[
          ["AWS/ContainerInsights","node_network_rx_bytes","ClusterName","CLUSTER","NodeName","*",{"label":"rx_bytes"}],
          [".","node_network_tx_bytes",".","CLUSTER","NodeName","*",{"label":"tx_bytes"}]
        ]
    }},
    { "type":"metric","x":12,"y":20,"width":12,"height":6,
      "properties":{"region":"REGION","title":"Node disk IO (read/write bytes) per node","view":"timeSeries","stat":"Sum","period":PERIOD,
        "metrics":[
          ["AWS/ContainerInsights","node_diskio_read_bytes","ClusterName","CLUSTER","NodeName","*",{"label":"read"}],
          [".","node_diskio_write_bytes",".","CLUSTER","NodeName","*",{"label":"write"}]
        ]
    }},

    /* ===== Containers (utilization, restarts) ===== */
    { "type":"metric","x":0,"y":26,"width":12,"height":6,
      "properties":{"region":"REGION","title":"Container CPU utilization (%) by container","view":"timeSeries","stat":"Average","period":PERIOD,
        "yAxis":{"left":{"min":0,"max":100,"label":"%"}},
        "metrics":[["AWS/ContainerInsights","container_cpu_utilization","ClusterName","CLUSTER","ContainerName","*",{"label":"container"}]]
    }},
    { "type":"metric","x":12,"y":26,"width":12,"height":6,
      "properties":{"region":"REGION","title":"Container Memory utilization (%) by container","view":"timeSeries","stat":"Average","period":PERIOD,
        "yAxis":{"left":{"min":0,"max":100,"label":"%"}},
        "metrics":[["AWS/ContainerInsights","container_memory_utilization","ClusterName","CLUSTER","ContainerName","*",{"label":"container"}]]
    }},
    { "type":"metric","x":0,"y":32,"width":12,"height":6,
      "properties":{"region":"REGION","title":"Container restarts by pod (approx)","view":"timeSeries","stat":"Sum","period":PERIOD,
        "metrics":[["AWS/ContainerInsights","container_restart_count","ClusterName","CLUSTER","PodName","*",{"label":"restarts"}]]
    }},

    /* ===== Logs Insights: Kubernetes events ===== */
    { "type":"log","x":12,"y":32,"width":12,"height":6,
      "properties":{
        "region":"REGION",
        "title":"Kubernetes Events (last 1d)",
        "query":"SOURCE '/aws/containerinsights/CLUSTER/application' | filter @logStream like /kube-apiserver/ or @message like /KubernetesEvents/ | stats count() by status, reason, involvedObject.kind, bin(1h) | sort @timestamp desc",
        "view":"table"
    }},

    /* ===== Optional: pod readiness/failed by pod name via metrics where available ===== */
    { "type":"metric","x":0,"y":38,"width":12,"height":6,
      "properties":{"region":"REGION","title":"Pods failed by pod name (if shipped)","view":"timeSeries","stat":"Sum","period":PERIOD,
        "metrics":[["AWS/ContainerInsights","pod_status_failed","ClusterName","CLUSTER","PodName","*",{"label":"failed_pods"}]]
    }},
    { "type":"metric","x":12,"y":38,"width":12,"height":6,
      "properties":{"region":"REGION","title":"Pods running by node","view":"timeSeries","stat":"Sum","period":PERIOD,
        "metrics":[["AWS/ContainerInsights","pod_number_of_running_pods","ClusterName","CLUSTER","NodeName","*",{"label":"node"}]]
    }}
  ]
}
JSON

# Fill placeholders
sed -i "s/REGION/$REGION/g" dashboard.json
sed -i "s/CLUSTER/$CLUSTER/g" dashboard.json
sed -i "s/PERIOD/$PERIOD/g" dashboard.json

echo "Creating/Updating dashboard..."
aws cloudwatch put-dashboard \
  --region "$REGION" \
  --dashboard-name "$DASHBOARD_NAME" \
  --dashboard-body file://dashboard.json

echo "Dashboard deployed."
echo "Open CloudWatch -> Dashboards -> ${DASHBOARD_NAME} (region $REGION)."

echo
echo "Quick verifications:"
START=$(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%SZ)
END=$(date -u +%Y-%m-%dT%H:%M:%SZ)

aws cloudwatch get-metric-data \
  --region "$REGION" \
  --start-time "$START" --end-time "$END" \
  --metric-data-queries "[{
    \"Id\":\"cpu\",
    \"MetricStat\":{
      \"Metric\":{
        \"Namespace\":\"$NS\",
        \"MetricName\":\"node_cpu_utilization\",
        \"Dimensions\":[{\"Name\":\"ClusterName\",\"Value\":\"$CLUSTER\"}]
      },\"Period\":$PERIOD,\"Stat\":\"Average\"
    }
  }]" \
  --query 'MetricDataResults[0].Timestamps | length(@)'

aws cloudwatch get-metric-data \
  --region "$REGION" \
  --start-time "$START" --end-time "$END" \
  --metric-data-queries "[{
    \"Id\":\"pods\",
    \"MetricStat\":{
      \"Metric\":{
        \"Namespace\":\"$NS\",
        \"MetricName\":\"pod_number_of_running_pods\",
        \"Dimensions\":[{\"Name\":\"ClusterName\",\"Value\":\"$CLUSTER\"}]
      },\"Period\":$PERIOD,\"Stat\":\"Sum\"
    }
  }]" \
  --query 'MetricDataResults[0].Timestamps | length(@)'
