#!/usr/bin/env bash
set -euo pipefail

# ==========================
# Config (edit if needed)
# ==========================
REGION="us-east-1"
DASH="APM-Trace-Ingestion"

NAMESPACE="APM/TraceIngestion"
ENV_DIM="nonprod"
SERVICE_DIM="checkout"

# Full set of Datadog ingestion reasons you showed
REASONS=("auto" "rule" "manual" "error" "rare" "analytics" "synthetics" "synthetics-browser" "rum" "lambda" "xray" "appsec" "unknown")

# Sample values to seed data (edit to your reality later)
# We'll make auto+rule dominant to match head-based focus
declare -A BYTES=(
  [auto]=125000 [rule]=25000  [manual]=300   [error]=10000  [rare]=5500
  [analytics]=100 [synthetics]=2000 [synthetics-browser]=900
  [rum]=1300 [lambda]=800 [xray]=600 [appsec]=400 [unknown]=50
)
declare -A SPANS=(
  [auto]=900 [rule]=100 [manual]=1 [error]=12 [rare]=7
  [analytics]=1 [synthetics]=5 [synthetics-browser]=3
  [rum]=3 [lambda]=2 [xray]=1 [appsec]=1 [unknown]=1
)

# ==========================
# 1) Create Logs infra for EMF
# ==========================
LOG_GROUP="/aws/apm/TraceIngestion"
LOG_STREAM="seed-$(date -u +%Y%m%dT%H%M%SZ)"

echo "Creating log group and stream (ok if they already exist)..."
aws logs create-log-group --region "$REGION" --log-group-name "$LOG_GROUP" 2>/dev/null || true
aws logs create-log-stream --region "$REGION" --log-group-name "$LOG_GROUP" --log-stream-name "$LOG_STREAM" 2>/dev/null || true

# ==========================
# 2) Emit one EMF event (CloudWatch extracts metrics from Logs)
# ==========================
# Build one EMF event for 'auto' as an example (you can repeat per reason if you want)
EMF_TS_MS=$(($(date -u +%s)*1000))
cat > emf_event.json <<EOF
{
  "_aws": {
    "Timestamp": ${EMF_TS_MS},
    "CloudWatchMetrics": [{
      "Namespace": "${NAMESPACE}",
      "Dimensions": [["Env","Service","IngestionReason"]],
      "Metrics": [
        {"Name":"IngestedBytes","Unit":"Bytes"},
        {"Name":"IngestedSpans","Unit":"Count"}
      ]
    }]
  },
  "Env": "${ENV_DIM}",
  "Service": "${SERVICE_DIM}",
  "IngestionReason": "auto",
  "IngestedBytes": ${BYTES[auto]},
  "IngestedSpans": ${SPANS[auto]}
}
EOF

echo "Putting one EMF log event (auto)..."
aws logs put-log-events \
  --region "$REGION" \
  --log-group-name "$LOG_GROUP" \
  --log-stream-name "$LOG_STREAM" \
  --log-events "timestamp=$(date -u +%s000),message=$(cat emf_event.json | tr -d '\n')"

# Note: EMF -> metric extraction is asynchronous.
# To ensure the dashboard shows data immediately, also push the same data via PutMetricData.

# ==========================
# 3) Seed metrics directly (immediate visibility)
# ==========================
echo "Seeding metrics directly via PutMetricData..."
# Build a big JSON array for --metric-data
MD_FILE="metric_data.json"
echo "[" > "$MD_FILE"
FIRST=1
for r in "${REASONS[@]}"; do
  # IngestedBytes
  if [ $FIRST -eq 0 ]; then echo "," >> "$MD_FILE"; fi
  FIRST=0
  cat >> "$MD_FILE" <<EOF
{
  "MetricName": "IngestedBytes",
  "Dimensions": [
    {"Name": "Env", "Value": "${ENV_DIM}"},
    {"Name": "Service", "Value": "${SERVICE_DIM}"},
    {"Name": "IngestionReason", "Value": "${r}"}
  ],
  "Timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "Value": ${BYTES[$r]},
  "Unit": "Bytes",
  "StorageResolution": 60
}
EOF

  # IngestedSpans
  echo "," >> "$MD_FILE"
  cat >> "$MD_FILE" <<EOF
{
  "MetricName": "IngestedSpans",
  "Dimensions": [
    {"Name": "Env", "Value": "${ENV_DIM}"},
    {"Name": "Service", "Value": "${SERVICE_DIM}"},
    {"Name": "IngestionReason", "Value": "${r}"}
  ],
  "Timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "Value": ${SPANS[$r]},
  "Unit": "Count",
  "StorageResolution": 60
}
EOF
done
echo "]" >> "$MD_FILE"

aws cloudwatch put-metric-data \
  --region "$REGION" \
  --namespace "$NAMESPACE" \
  --metric-data "file://$MD_FILE"

# ==========================
# 4) Create/Update the Dashboard (inline JSON)
# ==========================
echo "Creating/Updating dashboard ${DASH}..."
aws cloudwatch put-dashboard \
  --region "$REGION" \
  --dashboard-name "$DASH" \
  --dashboard-body "$(cat <<'JSON'
{
  "widgets": [
    {
      "type": "metric",
      "x": 0, "y": 0, "width": 12, "height": 6,
      "properties": {
        "title": "Ingested bytes by reason over time (stacked)",
        "region": "us-east-1",
        "stat": "Sum",
        "period": 300,
        "stacked": true,
        "view": "timeSeries",
        "yAxis": {"left": {"label": "Bytes"}},
        "metrics": [
          [ "APM/TraceIngestion", "IngestedBytes", "Env", "*", "Service", "*", "IngestionReason", "auto", {"id":"m_auto"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rule", {"id":"m_rule"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "manual", {"id":"m_manual"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "error", {"id":"m_error"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rare", {"id":"m_rare"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "analytics", {"id":"m_analytics"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "synthetics", {"id":"m_synth"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "synthetics-browser", {"id":"m_synthbrowser"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rum", {"id":"m_rum"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "xray", {"id":"m_xray"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "lambda", {"id":"m_lambda"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "appsec", {"id":"m_appsec"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "unknown", {"id":"m_unknown"} ]
        ]
      }
    },
    {
      "type": "metric",
      "x": 0, "y": 6, "width": 6, "height": 4,
      "properties": {
        "title": "Head-based (auto + rule) - bytes and % of total",
        "region": "us-east-1",
        "stat": "Sum",
        "period": 300,
        "view": "singleValue",
        "metrics": [
          [ { "expression": "m_auto + m_rule", "label": "HeadBasedBytes", "id": "e_head_bytes" } ],
          [ { "expression": "(m_auto + m_rule) / (m_auto + m_rule + m_manual + m_error + m_rare + m_analytics + m_synth + m_synthbrowser + m_rum + m_xray + m_lambda + m_appsec + m_unknown) * 100", "label": "HeadBased % of total", "id": "e_head_pct" } ],
          [ "APM/TraceIngestion", "IngestedBytes", "Env", "*", "Service", "*", "IngestionReason", "auto", {"visible": false, "id": "m_auto"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rule", {"visible": false, "id": "m_rule"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "manual", {"visible": false, "id": "m_manual"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "error", {"visible": false, "id": "m_error"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rare", {"visible": false, "id": "m_rare"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "analytics", {"visible": false, "id": "m_analytics"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "synthetics", {"visible": false, "id": "m_synth"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "synthetics-browser", {"visible": false, "id": "m_synthbrowser"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rum", {"visible": false, "id": "m_rum"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "xray", {"visible": false, "id": "m_xray"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "lambda", {"visible": false, "id": "m_lambda"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "appsec", {"visible": false, "id": "m_appsec"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "unknown", {"visible": false, "id": "m_unknown"} ]
        ]
      }
    },
    {
      "type": "metric",
      "x": 6, "y": 6, "width": 6, "height": 4,
      "properties": {
        "title": "Current totals by ingestion reason (bytes)",
        "region": "us-east-1",
        "stat": "Sum",
        "period": 300,
        "view": "singleValue",
        "metrics": [
          [ "APM/TraceIngestion", "IngestedBytes", "Env", "*", "Service", "*", "IngestionReason", "auto", {"label": "auto"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rule", {"label": "rule"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "error", {"label": "error"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rare", {"label": "rare"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "synthetics", {"label": "synthetics"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "synthetics-browser", {"label": "synthetics-browser"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rum", {"label": "rum"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "lambda", {"label": "lambda"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "xray", {"label": "xray"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "analytics", {"label": "analytics"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "manual", {"label": "manual"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "appsec", {"label": "appsec"} ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "unknown", {"label": "unknown"} ]
        ]
      }
    },
    {
      "type": "metric",
      "x": 0, "y": 10, "width": 12, "height": 6,
      "properties": {
        "title": "Ingested bytes by reason (bars)",
        "region": "us-east-1",
        "stat": "Sum",
        "period": 300,
        "view": "bar",
        "yAxis": {"left": {"label": "Bytes"}},
        "metrics": [
          [ "APM/TraceIngestion", "IngestedBytes", "Env", "*", "Service", "*", "IngestionReason", "auto" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rule" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "manual" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "error" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rare" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "analytics" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "synthetics" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "synthetics-browser" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "rum" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "lambda" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "xray" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "appsec" ],
          [ ".", "IngestedBytes", ".", "*", ".", "*", "IngestionReason", "unknown" ]
        ]
      }
    }
  ]
}
JSON
)"

# ==========================
# 5) Verify
# ==========================
echo "Listing metrics in ${NAMESPACE}..."
aws cloudwatch list-metrics --region "$REGION" --namespace "$NAMESPACE" || true

echo "Querying recent datapoints (last 1 hour)..."
aws cloudwatch get-metric-data \
  --region "$REGION" \
  --start-time "$(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%SZ)" \
  --end-time   "$(date -u                +%Y-%m-%dT%H:%M:%SZ)" \
  --metric-data-queries '[
    {
      "Id":"totalbytes",
      "Expression":"SUM(SEARCH(\"{APM/TraceIngestion,IngestedBytes}\", \"Sum\", 300))",
      "Label":"Total IngestedBytes (all reasons)"
    },
    {
      "Id":"headbytes",
      "Expression":"SUM(SEARCH(\"{APM/TraceIngestion,IngestedBytes,IngestionReason=auto|rule}\", \"Sum\", 300))",
      "Label":"Head-based (auto+rule)"
    },
    {
      "Id":"headpct",
      "Expression":"100 * headbytes / MAX([totalbytes])",
      "Label":"Head-based % of total"
    }
  ]'

echo "Done. Open the CloudWatch console → Dashboards → ${DASH}."
