#!/usr/bin/env bash
set -euo pipefail

NAMESPACE="APM/TraceIngestion"
ENV_DIM="nonprod"
SERVICE_DIM="checkout"

# 1) Find the region that actually has your custom metrics
echo "[1/4] Scanning regions for $NAMESPACE/IngestedBytes ..."
HOME_REGION=""
for r in $(aws ec2 describe-regions --query 'Regions[].RegionName' --output text); do
  cnt=$(aws cloudwatch list-metrics \
    --region "$r" \
    --namespace "$NAMESPACE" \
    --metric-name "IngestedBytes" \
    --query 'length(Metrics)' --output text 2>/dev/null || echo 0)
  if [ "$cnt" != "0" ]; then
    HOME_REGION="$r"
    echo "  -> Found metrics in region: $HOME_REGION (series: $cnt)"
    break
  fi
done
if [ -z "$HOME_REGION" ]; then
  echo "No metrics found in any region. Seed metrics first, then rerun."
  exit 1
fi

# 2) Recreate dashboard with widgets pinned to the region that has data
echo "[2/4] Publishing dashboard to region $HOME_REGION ..."
aws cloudwatch put-dashboard \
  --region "$HOME_REGION" \
  --dashboard-name "APM-Trace-Ingestion" \
  --dashboard-body "$(cat <<JSON
{
  "widgets": [
    {
      "type": "metric","x":0,"y":0,"width":12,"height":6,
      "properties": {
        "title": "Ingested bytes by reason over time (stacked)",
        "region": "$HOME_REGION","stat":"Sum","period":300,"stacked":true,"view":"timeSeries",
        "yAxis":{"left":{"label":"Bytes"}},
        "metrics": [
          [ "$NAMESPACE","IngestedBytes","Env","*","Service","*","IngestionReason","auto",{"id":"m_auto"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rule",{"id":"m_rule"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","manual",{"id":"m_manual"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","error",{"id":"m_error"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rare",{"id":"m_rare"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","analytics",{"id":"m_analytics"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","synthetics",{"id":"m_synth"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","synthetics-browser",{"id":"m_synthbrowser"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rum",{"id":"m_rum"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","xray",{"id":"m_xray"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","lambda",{"id":"m_lambda"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","appsec",{"id":"m_appsec"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","unknown",{"id":"m_unknown"} ]
        ]
      }
    },
    {
      "type":"metric","x":0,"y":6,"width":6,"height":4,
      "properties":{
        "title":"Head-based (auto + rule) - bytes and % of total",
        "region":"$HOME_REGION","stat":"Sum","period":300,"view":"singleValue",
        "metrics":[
          [ { "expression":"m_auto + m_rule","label":"HeadBasedBytes","id":"e_head_bytes" } ],
          [ { "expression":"(m_auto + m_rule) / (m_auto + m_rule + m_manual + m_error + m_rare + m_analytics + m_synth + m_synthbrowser + m_rum + m_xray + m_lambda + m_appsec + m_unknown) * 100","label":"HeadBased % of total","id":"e_head_pct" } ],
          [ "$NAMESPACE","IngestedBytes","Env","*","Service","*","IngestionReason","auto",{"visible":false,"id":"m_auto"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rule",{"visible":false,"id":"m_rule"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","manual",{"visible":false,"id":"m_manual"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","error",{"visible":false,"id":"m_error"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rare",{"visible":false,"id":"m_rare"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","analytics",{"visible":false,"id":"m_analytics"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","synthetics",{"visible":false,"id":"m_synth"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","synthetics-browser",{"visible":false,"id":"m_synthbrowser"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rum",{"visible":false,"id":"m_rum"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","xray",{"visible":false,"id":"m_xray"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","lambda",{"visible":false,"id":"m_lambda"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","appsec",{"visible":false,"id":"m_appsec"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","unknown",{"visible":false,"id":"m_unknown"} ]
        ]
      }
    },
    {
      "type":"metric","x":6,"y":6,"width":6,"height":4,
      "properties":{
        "title":"Current totals by ingestion reason (bytes)",
        "region":"$HOME_REGION","stat":"Sum","period":300,"view":"singleValue",
        "metrics":[
          [ "$NAMESPACE","IngestedBytes","Env","*","Service","*","IngestionReason","auto",{"label":"auto"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rule",{"label":"rule"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","error",{"label":"error"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rare",{"label":"rare"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","synthetics",{"label":"synthetics"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","synthetics-browser",{"label":"synthetics-browser"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rum",{"label":"rum"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","lambda",{"label":"lambda"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","xray",{"label":"xray"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","analytics",{"label":"analytics"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","manual",{"label":"manual"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","appsec",{"label":"appsec"} ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","unknown",{"label":"unknown"} ]
        ]
      }
    },
    {
      "type":"metric","x":0,"y":10,"width":12,"height":6,
      "properties":{
        "title":"Ingested bytes by reason (bars)",
        "region":"$HOME_REGION","stat":"Sum","period":300,"view":"bar",
        "yAxis":{"left":{"label":"Bytes"}},
        "metrics":[
          [ "$NAMESPACE","IngestedBytes","Env","*","Service","*","IngestionReason","auto" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rule" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","manual" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","error" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rare" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","analytics" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","synthetics" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","synthetics-browser" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","rum" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","lambda" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","xray" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","appsec" ],
          [ ".","IngestedBytes",".","*",".","*","IngestionReason","unknown" ]
        ]
      }
    }
  ]
}
JSON
)"

# 3) Query the same region with MetricStat objects (no SEARCH, no quoting pain)
echo "[3/4] Verifying data via GetMetricData ..."
START=$(date -u -d '1 hour ago' +%Y-%m-%dT%H:%M:%SZ)
END=$(date -u +%Y-%m-%dT%H:%M:%SZ)
cat > queries.json <<JSON
[
  {"Id":"auto","Label":"auto","MetricStat":{"Metric":{"Namespace":"$NAMESPACE","MetricName":"IngestedBytes","Dimensions":[{"Name":"Env","Value":"$ENV_DIM"},{"Name":"Service","Value":"$SERVICE_DIM"},{"Name":"IngestionReason","Value":"auto"}]},"Period":300,"Stat":"Sum"}},
  {"Id":"rule","Label":"rule","MetricStat":{"Metric":{"Namespace":"$NAMESPACE","MetricName":"IngestedBytes","Dimensions":[{"Name":"Env","Value":"$ENV_DIM"},{"Name":"Service","Value":"$SERVICE_DIM"},{"Name":"IngestionReason","Value":"rule"}]},"Period":300,"Stat":"Sum"}},
  {"Id":"total","Label":"total","Expression":"auto + rule"},
  {"Id":"pct","Label":"head %","Expression":"100 * total / MAX([auto + rule])"}
]
JSON

aws cloudwatch get-metric-data \
  --region "$HOME_REGION" \
  --start-time "$START" \
  --end-time "$END" \
  --metric-data-queries file://queries.json

# 4) Reminder to set console region
echo "[4/4] Open CloudWatch console, set REGION (top-right) to: $HOME_REGION, then open Dashboard: APM-Trace-Ingestion"
