#!/usr/bin/env bash
set -euo pipefail

REGION="us-east-1"
DASHBOARD_NAME="AmazonMQ-Overview-us-east-1"

if ! command -v aws >/dev/null 2>&1; then
  echo "AWS CLI not found." >&2; exit 1
fi

aws sts get-caller-identity >/dev/null

TMP_JSON="$(mktemp /tmp/mq-dash.XXXXXX.json)"

# Static JSON with correct metric names and no trailing commas.
# It includes RabbitMQ and ActiveMQ sections; widgets simply show no data if that engine isn't used.
cat >"$TMP_JSON" <<'JSON'
{
  "widgets": [
    {
      "type":"metric","x":0,"y":0,"width":24,"height":6,
      "properties":{
        "title":"RabbitMQ: Publish / Ack / Confirm (msg/s)",
        "region":"us-east-1","view":"timeSeries","stat":"Sum","period":60,
        "metrics":[
          ["AWS/AmazonMQ","PublishRate","Broker","*"],
          [".","AckRate",".","*"],
          [".","ConfirmRate",".","*"]
        ]
      }
    },
    {
      "type":"metric","x":0,"y":6,"width":24,"height":6,
      "properties":{
        "title":"RabbitMQ: MessageCount / Ready / Unacked",
        "region":"us-east-1","view":"timeSeries","stat":"Average","period":60,
        "metrics":[
          ["AWS/AmazonMQ","MessageCount","Broker","*"],
          [".","MessageReadyCount",".","*"],
          [".","MessageUnacknowledgedCount",".","*"]
        ],
        "yAxis":{"left":{"min":0}}
      }
    },
    {
      "type":"metric","x":0,"y":12,"width":24,"height":6,
      "properties":{
        "title":"RabbitMQ: Connections / Channels / Consumers",
        "region":"us-east-1","view":"timeSeries","stat":"Average","period":60,
        "metrics":[
          ["AWS/AmazonMQ","ConnectionCount","Broker","*"],
          [".","ChannelCount",".","*"],
          [".","ConsumerCount",".","*"]
        ],
        "yAxis":{"left":{"min":0}}
      }
    },
    {
      "type":"metric","x":0,"y":18,"width":24,"height":6,
      "properties":{
        "title":"RabbitMQ: CPU Utilization",
        "region":"us-east-1","view":"timeSeries","stat":"Average","period":60,
        "metrics":[
          ["AWS/AmazonMQ","CpuUtilization","Broker","*"]
        ]
      }
    },

    {
      "type":"metric","x":0,"y":24,"width":24,"height":6,
      "properties":{
        "title":"ActiveMQ: Producers / Consumers / TotalMessageCount",
        "region":"us-east-1","view":"timeSeries","stat":"Average","period":60,
        "metrics":[
          ["AWS/AmazonMQ","TotalProducerCount","Broker","*"],
          [".","TotalConsumerCount",".","*"],
          [".","TotalMessageCount",".","*"]
        ],
        "yAxis":{"left":{"min":0}}
      }
    },
    {
      "type":"metric","x":0,"y":30,"width":24,"height":6,
      "properties":{
        "title":"ActiveMQ: Store% / Temp% / HeapUsage",
        "region":"us-east-1","view":"timeSeries","stat":"Average","period":60,
        "metrics":[
          ["AWS/AmazonMQ","StorePercentUsage","Broker","*"],
          [".","TempPercentUsage",".","*"],
          [".","HeapUsage",".","*"]
        ]
      }
    },
    {
      "type":"metric","x":0,"y":36,"width":24,"height":6,
      "properties":{
        "title":"ActiveMQ: Connections / CPU / Network",
        "region":"us-east-1","view":"timeSeries","period":60,
        "metrics":[
          ["AWS/AmazonMQ","CurrentConnectionsCount","Broker","*"],
          [".","CpuUtilization",".","*"],
          [".","NetworkIn",".","*"],
          [".","NetworkOut",".","*"]
        ]
      }
    },
    {
      "type":"metric","x":0,"y":42,"width":24,"height":6,
      "properties":{
        "title":"ActiveMQ: Journal files to replay",
        "region":"us-east-1","view":"timeSeries","stat":"Average","period":60,
        "metrics":[
          ["AWS/AmazonMQ","JournalFilesForFastRecovery","Broker","*"],
          [".","JournalFilesForFullRecovery",".","*"]
        ]
      }
    },
    {
      "type":"metric","x":0,"y":48,"width":24,"height":6,
      "properties":{
        "title":"ActiveMQ: TotalEnqueue / TotalDequeue",
        "region":"us-east-1","view":"timeSeries","stat":"Sum","period":300,
        "metrics":[
          ["AWS/AmazonMQ","TotalEnqueueCount","Broker","*"],
          [".","TotalDequeueCount",".","*"]
        ]
      }
    }
  ]
}
JSON

# Optional: validate JSON locally if jq exists
if command -v jq >/dev/null 2>&1; then
  jq . "$TMP_JSON" >/dev/null
fi

echo "Creating/updating CloudWatch dashboard: $DASHBOARD_NAME in $REGION ..."
aws cloudwatch put-dashboard \
  --region "$REGION" \
  --dashboard-name "$DASHBOARD_NAME" \
  --dashboard-body "file://$TMP_JSON" >/dev/null

rm -f "$TMP_JSON"
echo "Done. Open CloudWatch → Dashboards → $DASHBOARD_NAME (region $REGION)."
