# azure-pipelines.yml
# Sandbox test deploy for VPC + Aurora PostgreSQL Serverless

trigger: none

resources:
  repositories:
    - repository: templates
      type: git
      name: DEVOPS_Platform_as_a_Service/deploy-templates
      ref: refs/tags/7.5.0

    - repository: vpc
      type: git
      name: DEVOPS_Platform_as_a_Service/vpc
      ref: refs/tags/4.1.1

    - repository: security-groups
      type: git
      name: DEVOPS_Platform_as_a_Service/security-groups
      ref: refs/tags/2.36.1

    - repository: sns-subtopic
      type: git
      name: DEVOPS_Platform_as_a_Service/sns-subtopic
      ref: refs/tags/2.0.1

    - repository: RDS-Aurora-PostgreSQL-serverless
      type: git
      name: DEVOPS_Platform_as_a_Service/RDS-Aurora-PostgreSQL-serverless
      ref: refs/tags/1.2.0

variables:
  # Folder in THIS repo that contains your root Terraform
  pipelineSrcDirectory: 'terraform'

parameters:
- name: terrformPLANonly
  displayName: tfPlanOnly (check == true)
  type: boolean
  default: true

stages:
  - template: deploy/tf-create-infra-template.yml@templates
    parameters:
      environment: sandbox
      environmentDisplayName: Sandbox

      # Your existing service connections
      tfServiceConnection: DevopsSandbox-889050139813-DevopsIACSvcVpc-us-east-1
      awsServiceConnection: DevopsSandbox-889050139813-DevopsIACSvcVpc

      tfVersion: 1.12.2
      application: PlatformEng

      # Path to your Terraform root folder within this repo
      pipelineSrcDir: $(pipelineSrcDirectory)

      # First run with true to PLAN, then set to false to APPLY
      tfPlanOnly: ${{ parameters.terrformPLANonly }}

      # Module toggles â€“ enable only what we need for this test
      reqRDSauroraPg: true
      reqRDSaurora: false
      reqRDSmssqlMod: false
      reqMongoMod: false
      reqEKSGRule: false
      reqEKSMod: false
      reqAmazonMQMod: false
      reqDocDB: false
      reqSSRS: false

      # Misc template fields
      customer: Thompson-Inc
      regionName: us-east-1
