#!/usr/bin/env bash
set -euo pipefail

REGION="us-east-1"
DASHBOARD_NAME="ASG-Overview"

if ! command -v aws >/dev/null 2>&1; then
  echo "AWS CLI not found. Install and configure it first." >&2
  exit 1
fi

# Verify auth
aws sts get-caller-identity >/dev/null

echo "Region: ${REGION}"

# 1) Enable ASG group metrics for every ASG (idempotent)
echo "Enabling Auto Scaling group metrics for all ASGs in ${REGION}..."
mapfile -t ASGS < <(aws autoscaling describe-auto-scaling-groups \
  --region "$REGION" \
  --query 'AutoScalingGroups[].AutoScalingGroupName' \
  --output text | tr '\t' '\n' | sed '/^$/d' || true)

if [ "${#ASGS[@]}" -eq 0 ]; then
  echo "No Auto Scaling groups found in ${REGION}. Continuing to dashboard creation."
else
  for asg in "${ASGS[@]}"; do
    aws autoscaling enable-metrics-collection \
      --region "$REGION" \
      --auto-scaling-group-name "$asg" \
      --granularity 1Minute >/dev/null || true
  done
fi

# 2) Create dashboard JSON (no SEARCH(); fully dynamic via AutoScalingGroupName="*")
tmp_json="$(mktemp /tmp/asg-dash.XXXXXX.json)"
cat >"$tmp_json" <<JSON
{
  "widgets": [
    {
      "type": "metric", "x": 0, "y": 0, "width": 24, "height": 7,
      "properties": {
        "title": "ASG Capacity (Desired / InService)",
        "region": "${REGION}", "view": "timeSeries", "stat": "Average", "period": 60,
        "metrics": [
          [ "AWS/AutoScaling", "GroupDesiredCapacity", "AutoScalingGroupName", "*" ],
          [ ".", "GroupInServiceInstances", ".", "*" ]
        ],
        "yAxis": { "left": { "min": 0 } }
      }
    },
    {
      "type": "metric", "x": 0, "y": 7, "width": 24, "height": 7,
      "properties": {
        "title": "ASG Pending / Terminating",
        "region": "${REGION}", "view": "timeSeries", "stat": "Average", "period": 60,
        "metrics": [
          [ "AWS/AutoScaling", "GroupPendingInstances", "AutoScalingGroupName", "*" ],
          [ ".", "GroupTerminatingInstances", ".", "*" ]
        ],
        "yAxis": { "left": { "min": 0 } }
      }
    },
    {
      "type": "metric", "x": 0, "y": 14, "width": 24, "height": 7,
      "properties": {
        "title": "ASG Total / Standby",
        "region": "${REGION}", "view": "timeSeries", "stat": "Average", "period": 60,
        "metrics": [
          [ "AWS/AutoScaling", "GroupTotalInstances", "AutoScalingGroupName", "*" ],
          [ ".", "GroupStandbyInstances", ".", "*" ]
        ],
        "yAxis": { "left": { "min": 0 } }
      }
    },
    {
      "type": "metric", "x": 0, "y": 21, "width": 24, "height": 7,
      "properties": {
        "title": "EC2 StatusCheckFailed (aggregated by ASG)",
        "region": "${REGION}", "view": "timeSeries", "stat": "Maximum", "period": 60,
        "metrics": [
          [ "AWS/EC2", "StatusCheckFailed", "AutoScalingGroupName", "*" ]
        ],
        "yAxis": { "left": { "min": 0 } },
        "legend": { "position": "right" }
      }
    },
    {
      "type": "metric", "x": 0, "y": 28, "width": 24, "height": 7,
      "properties": {
        "title": "CPUUtilization (aggregated by ASG)",
        "region": "${REGION}", "view": "timeSeries", "stat": "Average", "period": 300,
        "metrics": [
          [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "*" ]
        ],
        "legend": { "position": "right" }
      }
    }
  ]
}
JSON

echo "Creating/updating CloudWatch dashboard: ${DASHBOARD_NAME} ..."
aws cloudwatch put-dashboard \
  --region "$REGION" \
  --dashboard-name "$DASHBOARD_NAME" \
  --dashboard-body "file://${tmp_json}" >/dev/null

rm -f "$tmp_json"
echo "Done. Open CloudWatch → Dashboards → ${DASHBOARD_NAME} (region ${REGION})."
