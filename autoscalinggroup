#!/usr/bin/env bash
set -euo pipefail

# asg_dashboard_setup.sh
# - Enables Auto Scaling "group metrics" for every ASG in each region you pass
# - Creates/updates a CloudWatch dashboard named ASG-Overview-<region> per region
#   with dynamic widgets that include all ASGs (no hardcoding)

# Usage:
#   ./asg_dashboard_setup.sh us-east-1 eu-west-1
#   ./asg_dashboard_setup.sh   # uses aws configure get region

if ! command -v aws >/dev/null 2>&1; then
  echo "AWS CLI not found. Install and configure it first." >&2
  exit 1
fi

# Determine regions to operate on
if [ "$#" -eq 0 ]; then
  DEFAULT_REGION="$(aws configure get region || true)"
  if [ -z "${DEFAULT_REGION:-}" ]; then
    echo "No region args and no default region configured. Pass at least one region." >&2
    exit 1
  fi
  REGIONS=("$DEFAULT_REGION")
else
  REGIONS=("$@")
fi

# Verify AWS identity (will also fail fast if auth is broken)
aws sts get-caller-identity >/dev/null

enable_group_metrics() {
  local region="$1"
  echo "Enabling ASG group metrics in ${region} (idempotent)..."
  # Get all ASG names (handles pagination)
  mapfile -t ASGS < <(aws autoscaling describe-auto-scaling-groups \
      --region "$region" \
      --query 'AutoScalingGroups[].AutoScalingGroupName' \
      --output text | tr '\t' '\n' | sed '/^$/d' || true)

  if [ "${#ASGS[@]}" -eq 0 ]; then
    echo "No Auto Scaling groups found in ${region}. Continuing."
    return 0
  fi

  for asg in "${ASGS[@]}"; do
    aws autoscaling enable-metrics-collection \
      --region "$region" \
      --auto-scaling-group-name "$asg" \
      --granularity 1Minute >/dev/null || true
  done
}

put_dashboard() {
  local region="$1"
  local dash="ASG-Overview-${region}"
  local tmp_json
  tmp_json="$(mktemp /tmp/asg-dash.XXXXXX.json)"

  # Dashboard widgets:
  # 1) Desired vs InService (per ASG)
  # 2) Pending vs Terminating (per ASG)
  # 3) Total vs Standby (per ASG)
  # 4) Instance StatusCheckFailed (per instance, grouped by ASG)
  # 5) CPUUtilization (per instance, grouped by ASG)
  # All widgets are dynamic via AutoScalingGroupName="*"
  cat >"$tmp_json" <<JSON
{
  "widgets": [
    {
      "type": "metric", "x": 0, "y": 0, "width": 24, "height": 7,
      "properties": {
        "title": "ASG Capacity (Desired / InService)",
        "region": "${region}", "view": "timeSeries", "stat": "Average", "period": 60,
        "metrics": [
          [ "AWS/AutoScaling", "GroupDesiredCapacity", "AutoScalingGroupName", "*" ],
          [ ".", "GroupInServiceInstances", ".", "*" ]
        ],
        "yAxis": { "left": { "min": 0 } }
      }
    },
    {
      "type": "metric", "x": 0, "y": 7, "width": 24, "height": 7,
      "properties": {
        "title": "ASG Pending / Terminating",
        "region": "${region}", "view": "timeSeries", "stat": "Average", "period": 60,
        "metrics": [
          [ "AWS/AutoScaling", "GroupPendingInstances", "AutoScalingGroupName", "*" ],
          [ ".", "GroupTerminatingInstances", ".", "*" ]
        ],
        "yAxis": { "left": { "min": 0 } }
      }
    },
    {
      "type": "metric", "x": 0, "y": 14, "width": 24, "height": 7,
      "properties": {
        "title": "ASG Total / Standby",
        "region": "${region}", "view": "timeSeries", "stat": "Average", "period": 60,
        "metrics": [
          [ "AWS/AutoScaling", "GroupTotalInstances", "AutoScalingGroupName", "*" ],
          [ ".", "GroupStandbyInstances", ".", "*" ]
        ],
        "yAxis": { "left": { "min": 0 } }
      }
    },
    {
      "type": "metric", "x": 0, "y": 21, "width": 24, "height": 7,
      "properties": {
        "title": "EC2 StatusCheckFailed (per instance, grouped by ASG)",
        "region": "${region}", "view": "timeSeries", "stat": "Maximum", "period": 60,
        "metrics": [
          [ "AWS/EC2", "StatusCheckFailed", "AutoScalingGroupName", "*", "InstanceId", "*" ]
        ],
        "yAxis": { "left": { "min": 0 } },
        "legend": { "position": "right" }
      }
    },
    {
      "type": "metric", "x": 0, "y": 28, "width": 24, "height": 7,
      "properties": {
        "title": "CPUUtilization (per instance, grouped by ASG)",
        "region": "${region}", "view": "timeSeries", "stat": "Average", "period": 300,
        "metrics": [
          [ "AWS/EC2", "CPUUtilization", "AutoScalingGroupName", "*", "InstanceId", "*" ]
        ],
        "legend": { "position": "right" }
      }
    }
  ]
}
JSON

  echo "Creating/updating dashboard ${dash} in ${region}..."
  aws cloudwatch put-dashboard \
    --region "$region" \
    --dashboard-name "$dash" \
    --dashboard-body "file://${tmp_json}" >/dev/null

  rm -f "$tmp_json"
  echo "Dashboard ready: CloudWatch → Dashboards → ${dash}"
}

for r in "${REGIONS[@]}"; do
  echo "----- Region: ${r} -----"
  enable_group_metrics "$r"
  put_dashboard "$r"
done

echo "All done."
